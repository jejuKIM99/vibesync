<%@page import="mvc.domain.vo.UserVO"%>
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%

   String contextPath = request.getContextPath() + "/vibesync";

%>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">

<style>
.notion-sidebar {
  position: relative;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  height: 100%;
  width: 100%;
}

.notion-sidebar .menu_content {
  display: flex;
  justify-content: center;
  align-items: start;
  flex-direction: column;
  gap: 40px;
  font-size: 20px;
  font-weight: bold;
  margin-left: 10px;
  margin-block: 60px;
}
.notion-sidebar .menu_content .nickname {
  text-decoration: none;
  color: var(--font-color);
}

.search {
  display: inline-flex;
  align-items: center;
  position: relative;
  cursor: pointer;
}

/* 입력창 숨김 상태 */
.search-input {
  width: 100px;
  height: 22px;
  background: none;
  border: none;
  border-bottom: var(--border-color) 2px solid;
  color: var(--font-color);
}

input:focus {
  outline: none;
}

#follow {
  display: flex;
  justify-content: start;
  align-items: center;
  flex-direction: column;
  padding: 0;
  height: auto;
  overflow: hidden;
}

/* 레이블 스타일 */
.follow_list label {
  text-decoration: none;
  color: var(--font-color);
  cursor: pointer;
}

/* 체크박스 숨김 */
#follow_toggle {
  display: none;
}

.follow_items {
  list-style: none;
  padding: 0;
  margin: 20px 0 0;
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.3s ease-out;
}
.follow_items.show {
  max-height: 500px;
  transition: max-height 0.3s ease-in;
}

.follow_items li {
  margin: 4px 0;
}

.icon_wrap {
  display: flex;
  gap: 10px;
}

.nickname-container {
  width: 100%;
  position: relative;
  display: inline-block;
}

.profile img {
  width: 100px;
  height: 100px;
  object-fit: cover;
  border-radius: 50%;
  aspect-ratio: 1/1;
  margin-bottom: 13px;
  border: 4px solid transparent;
  display: block;
  background-image: linear-gradient(var(--card-back), var(--card-back)), linear-gradient(90deg, rgba(138, 196, 255, 1) 0%, rgba(227, 176, 255, 1) 50%, rgba(165, 250, 120, 1) 100%);
  background-origin: border-box;
  background-clip: content-box, border-box;
}

.nickname {
  display: inline-block;
  max-width: 150px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  cursor: pointer;
  padding: 2px 4px;
}

.accountDataLabel {
  font-weight: 400;
  font-size: medium;
  color: grey !important;
}

.accountDataValue {
  font-weight: 500;
  font-size: medium;
}

.modal-sidebar {
    display: none;
    position: absolute;
    top: 100%;
    left: 0;
    background-color: var(--card-back);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    z-index: 1000;
    white-space: nowrap;
    width: 210px;
    height: auto;
    padding: 15px;
    box-sizing: border-box;
}

.modal-nickname {
  display: block;
  text-decoration: none;
  color: var(--modal-font);
  padding: 4px 10px;
  margin-bottom: 10px;
}

.modal-nickname:hover {
  text-decoration: underline;
}

#nickname-modal-2 {
    display: none;
}
#nickname-modal-2 .theme-selector-container {
    width: 100%;
    padding: 0;
    border: none;
    margin-top: 10px;
    display: flex;
    flex-direction: column;
    gap: 5px;
}

.modal-btn{
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  text-align: center;
  
  background: #f8f8fa;
  color: #222;
  font-weight: 700;
  font-size: 17px;
  height: 38px;
  border-radius: 12px;
  border: 1.8px solid #e1e4ea;
  margin-bottom: 7px;
  transition: background 0.18s, box-shadow 0.18s;
  box-shadow: 0 1.5px 6px rgba(180,180,200,0.05);
  letter-spacing: 0.2px;
  outline: none;
  cursor: pointer;
}
.modal-btn i {
  font-size: 18px;
  margin-right: 2px;
  color: var(--font-color);
}
.modal-btn img {
   max-height: 22px;
   max-width: 22px;
}

/* 
#logout form > button {
  border-color: #ffb7c5;
  color: #e35a6d;
}
#logout form > button:hover {
  background: #fff1f4;
}

#setting button {
  border-color: #8cd9c9;
  color: #2b8c7e;
}
#setting button:hover {
  background: #e6f7f2;
}
 */

#setting .modal-btn:hover {
  background: #e6f0fa;
  color: #1a81d6;
  border-color: #b9d3ec;
}
#logout .modal-btn:hover {
  background: #f3e7ea;
  color: #ed5e68;
  border-color: #eabec9;
}

</style>

<style> /* 설정 모드 */
  /* 전체 테마 선택 영역 컨테이너 */
  .theme-selector-container {
    display: flex;
    flex-direction: column;
    gap: 10px;
    width: 220px; /* 너비 조절 */
    padding: 20px;
    border: 1px solid #ccc;
    border-radius: 8px;
    font-family: sans-serif;
  }

  /* 각 옵션을 감싸는 label. 이제 div가 아니라 label입니다. */
  .theme-option-label {
    display: flex;
    align-items: center;
    padding: 6px 10px;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.2s;
    border: 1px solid transparent;
    position: relative;
  }

  .theme-option-label:hover {
    background-color: var(--hover-color);
  }
  
  /* 기본 라디오 버튼 숨기기 */
  .theme-option-label input[type="radio"] {
    position: absolute;
    opacity: 0;
    width: 0;
    height: 0;
  }

  /* 직접 디자인한 동그라미 (커스텀 라디오 버튼) */
  .custom-radio {
    width: 20px;
    height: 20px;
    border: 2px solid #ccc;
    border-radius: 50%; /* 완벽한 원으로 만들기 */
    margin-right: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: border-color 0.2s;
  }

  /* 선택되었을 때의 내부 원 */
  .custom-radio .inner-circle {
    width: 10px;
    height: 10px;
    background-color: #3498db;
    border-radius: 50%;
    transform: scale(0); /* 평소에는 안 보이게 축소 */
    transition: transform 0.2s ease-in-out;
  }
  
  /* --- 핵심 로직 --- */
  /* 숨겨진 라디오 버튼이 체크되면(:checked), 바로 다음에 오는(.custom-radio) 요소의 스타일을 변경 */
  .theme-option-label input[type="radio"]:checked + .custom-radio {
    border-color: #3498db;
    background-color: #ddeafd;
  }

  /* 체크되면 내부 원을 다시 보이게 확대 */
  .theme-option-label input[type="radio"]:checked + .custom-radio .inner-circle {
    transform: scale(1);
  }

  /* 'Light', 'Dark' 텍스트 레이블 */
  .theme-label-text {
    font-weight: 500;
    font-size: 14px;
    margin-left: 10px;
  }

  /* 우측의 SVG 아이콘 컨테이너 */
  .theme-icon-svg {
    margin-left: auto; /* 왼쪽의 모든 요소를 밀어내고 오른쪽 끝으로 이동 */
  }

  .theme-icon-svg img {
    width: 50px;
    height: auto;
    display: block;
  }
  
  #nickname-modal-2 #back-btn {
    margin-bottom: 10px;
  }
  
  .sidebar-profile img {
	min-width: 30px;
    max-width: 30px;
    height: 30px;
    object-fit: cover;
    border-radius: 50%;
    margin-right: 10px;
    border: 2px solid transparent;
    display: block;
    background-image: linear-gradient(var(--card-back), var(--card-back)), linear-gradient(90deg, rgba(138, 196, 255, 1) 0%, rgba(227, 176, 255, 1) 50%, rgba(165, 250, 120, 1) 100%);
    background-origin: border-box;
    background-clip: content-box, border-box;
  }
</style>

<nav class="notion-sidebar-container" id="sidebar">
  <button id="toggle-btn">☰</button>
  <div class="notion-sidebar">
    <div class="menu_content">
      <!-- 프로필, 닉네임, 팔로잉/팔로워 버튼 -->
      <div class="nickname-container">
        <span class="profile" id="profile-display">
          <c:choose>
            <c:when test="${not empty userInfo.img}">
              <img src="<%= contextPath %>${userInfo.img}" alt="프로필">
            </c:when>
            <c:otherwise>
              <img src="<%= contextPath %>/sources/default/default_user.jpg" alt="기본 프로필">
            </c:otherwise>
          </c:choose>
        </span>
        <span class="nickname" id="nickname-display">${userInfo.nickname}</span>
        <div class="accountData" id="accountData-display">
          <button type="button" id="following-btn" class="modal-follow-message">
            <span class="accountDataValue"></span> <span class="accountDataLabel">팔로잉</span>
          </button>
          <button type="button" id="follower-btn" class="modal-follow-message">
            <span class="accountDataValue"></span> <span class="accountDataLabel">팔로워</span>
          </button>
        </div>
      </div>

      <!-- 검색, 홈, 워크스페이스, 페이지 링크 등 기존 메뉴 -->
      <!-- ... (생략: 기존 메뉴 항목) ... -->
    </div>

    <!-- 팔로잉/팔로워/메시지 모달창: 추출된 기능 -->
    <div id="followListModal" class="modal-overlay-follow">
      <div class="modal-follow-content">
        <span class="close-modal">&times;</span>
        <div class="modal-follow-header">
          <button type="button" class="modal-follow-tab-btn" data-tab-type="following">팔로잉</button>
          <button type="button" class="modal-follow-tab-btn" data-tab-type="follower">팔로워</button>
          <button type="button" class="modal-follow-tab-btn" data-tab-type="message">메시지</button>
        </div>
        <div id="followListContent" class="modal-follow-list-container">
          <!-- AJAX 로 채워집니다 -->
        </div>
      </div>
    </div>

    <!-- 채팅방 모달창: 기존 기능 유지 -->
    <div id="chatRoomModal" class="chatRoom-modal-super-container modal-overlay-follow">
      <div class="modal-follow-content chatRoom-modal-content">
        <button class="close-modal" onclick="closechatRoomModal()">&times;</button>
        <h2 id="chatRoomTitle"></h2>
        <div id="chatRoomHistory"></div>
        <div class="chatRoom-input-row">
          <input id="chatRoomInput" placeholder="메시지를 입력하세요…" />
          <button id="sendMessageBtn" onclick="sendchatRoomMessage()">
            <i class="fa-solid fa-paper-plane"></i>
          </button>
        </div>
      </div>
    </div>
  </div>
</nav>

<script>
  $(document).ready(function() {
    // 기존에 있던 updateFollowCount, 이벤트 핸들러 등 유지
    updateFollowCount();

    $('#following-btn, #follower-btn').on('click', function() {
      let defaultTab = $(this).attr('id') === 'following-btn' ? 'following' : 'follower';
      openFollowListModal(defaultTab);
    });

    $(document).on('click', '.modal-follow-tab-btn', function() {
      $('.modal-follow-tab-btn').removeClass('active');
      $(this).addClass('active');
      loadFollowListData($(this).data('tab-type'));
    });

    $(document).on('click', '#followListModal .close-modal', function() {
      closeFollowListModal();
    });
  });

  function openFollowListModal(defaultTab) {
    const isLoggedIn = ${sessionScope.userInfo != null};
    if (!isLoggedIn) {
      alert("로그인이 필요합니다.");
      location.href = "<%= request.getContextPath() %>/vibesync/user.do";
      return;
    }
    $('#followListModal').css('display', 'flex');
    $('.modal-follow-tab-btn').removeClass('active');
    $(`.modal-follow-tab-btn[data-tab-type="${defaultTab}"]`).addClass('active');
    loadFollowListData(defaultTab);
  }

  function loadFollowListData(tabType) {
    const listContainer = $('#followListContent');
    listContainer.html('<p style="text-align:center; padding: 20px;">로딩 중...</p>');

    let apiUrl, requestData;
    if (tabType === 'following') {
      apiUrl = '<%= request.getContextPath() %>/follow.do';
      requestData = { action: 'getFollowing' };
    } else if (tabType === 'follower') {
      apiUrl = '<%= request.getContextPath() %>/follow.do';
      requestData = { action: 'getFollower' };
    } else {
      listContainer.html('<p style="text-align:center; padding: 20px;">잘못된 탭 요청입니다.</p>');
      return;
    }

    $.ajax({
      url: apiUrl,
      type: 'GET',
      data: requestData,
      dataType: 'json',
      success: function(response) {
        listContainer.empty();
        if (!response || response.length === 0) {
          listContainer.html('<p class="no-message-placeholder"><i class="fa-solid fa-users"></i><p>목록이 비어있습니다.</p></p>');
          return;
        }
        response.forEach(user => {
          const profile = user.profile_img ?
            `<img src="<%= request.getContextPath() %>/${user.profile_img}" alt="프로필">` :
            `<img src="<%= request.getContextPath() %>/sources/default/default_user.jpg" alt="기본 프로필">`;
          const isFollowing = user.followedByCurrentUser;
          const btnClass = isFollowing ? 'follow-toggle-btn unfollow' : 'follow-toggle-btn';
          const btnText = isFollowing ? '팔로잉' : '팔로우';

          const item = `
            <div class="follow-list-item">
              ${profile}
              <div class="user-info">
                <a href="userPage.do?acIdx=${user.ac_idx}" class="nickname">${user.nickname}</a>
              </div>
              <div class="action-buttons">
                <button type="button" class="${btnClass}" data-target-ac-idx="${user.ac_idx}">${btnText}</button>
              </div>
            </div>
          `;
          listContainer.append(item);
        });
      },
      error: function() {
        listContainer.html('<p style="text-align:center; padding: 20px; color:red;">데이터 로드 실패</p>');
      }
    });
  }

  function closeFollowListModal() {
    $('#followListModal').hide();
  }
</script>
