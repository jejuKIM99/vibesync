/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.104
 * Generated at: 2025-06-05 01:59:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.vibesync;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.doit.domain.NoteVO;
import java.util.ArrayList;
import org.doit.dao.UserPageDAO;
import org.doit.domain.UserPage_UserVO;

public final class user_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(6);
    _jspx_imports_classes.add("org.doit.domain.UserPage_UserVO");
    _jspx_imports_classes.add("org.doit.dao.UserPageDAO");
    _jspx_imports_classes.add("org.doit.domain.NoteVO");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");


String user_idx_str = request.getParameter("ui");
int useridx = 0;
if (user_idx_str != null || user_idx_str != "") {
	useridx = Integer.parseInt(user_idx_str);
}

UserPage_UserVO user = UserPageDAO.getUserData(useridx);
ArrayList<NoteVO> user_note = UserPageDAO.getNotesByUser(useridx);

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("  <meta charset=\"UTF-8\">\r\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("  <title>user</title>\r\n");
      out.write("\r\n");
      out.write("  <link rel=\"stylesheet\" href=\"./css/style.css\">\r\n");
      out.write("  <script defer src=\"./js/script.js\"></script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("  <div id=\"notion-app\">\r\n");
      out.write("    <input type=\"hidden\" id=\"mode\" value=\"user\">\r\n");
      out.write("    <div class=\"notion-app-inner\">\r\n");
      out.write("      ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "./includes/sidebar.jsp", out, false);
      out.write("\r\n");
      out.write("      \r\n");
      out.write("      <!-- content -->\r\n");
      out.write("      <div id=\"content_wrapper\">\r\n");
      out.write("        <section id=\"content\">\r\n");
      out.write("          <div id=\"user_wrapper\">\r\n");
      out.write("            <div id=\"userInfo\">\r\n");
      out.write("    \r\n");
      out.write("              <div class=\"user_profile_img\">\r\n");
      out.write("                <img src=\"");
      out.print( user.getImg() );
      out.write("\" alt=\"\">\r\n");
      out.write("              </div>\r\n");
      out.write("    \r\n");
      out.write("              <div class=\"userInfo_detail\">\r\n");
      out.write("                <div class=\"name_function\">\r\n");
      out.write("                  <p>");
      out.print(user.getNickname() );
      out.write("</p>\r\n");
      out.write("                  <button class=\"btn_follow_1\">Follow</button>\r\n");
      out.write("                  <button class=\"btn_follow_2\">Watch Party</button>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"user_count\">\r\n");
      out.write("                  <p>Post <span>");
      out.print( user_note.size() );
      out.write("</span></p>\r\n");
      out.write("                  <p>Follower <span>");
      out.print( user.getFollow() );
      out.write("</span></p>\r\n");
      out.write("                  <p>Follow <span>");
      out.print( user.getFollow() );
      out.write("</span></p>\r\n");
      out.write("                </div>\r\n");
      out.write("              </div>\r\n");
      out.write("            </div>\r\n");
      out.write("    \r\n");
      out.write("            <div class=\"line\"></div>\r\n");
      out.write("    \r\n");
      out.write("            <div id=\"con_wrapper\">\r\n");
      out.write("            	");
 if (user_note.size() == 0)  {
            	
      out.write("<p>아직 작성된 글이 없습니다.</p>");

            	} else {
            		for (NoteVO note : user_note) {
      out.write("\r\n");
      out.write("            			<div class=\"con_item\">\r\n");
      out.write("            				<div class=\"note_imte\">\r\n");
      out.write("		                      <img src=\"");
      out.print( note.getImg() );
      out.write("\" alt=\"");
      out.print( note.getImg());
      out.write("\">\r\n");
      out.write("		                    </div>\r\n");
      out.write("           					<div class=\"note_info\">\r\n");
      out.write("		                      <p>\r\n");
      out.write("		                        <span class=\"category\">");
      out.print( note.getCategory_idx() );
      out.write("</span>\r\n");
      out.write("		                        <span class=\"title\">");
      out.print( note.getTitle() );
      out.write("</span>\r\n");
      out.write("		                      </p>\r\n");
      out.write("		                    </div>\r\n");
      out.write("            			</div>\r\n");
      out.write("            		");
}
            	}
      out.write("\r\n");
      out.write("\r\n");
      out.write("            </div>\r\n");
      out.write("            \r\n");
      out.write("          </div>\r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("        </section>\r\n");
      out.write("      </div>\r\n");
      out.write("    </div>\r\n");
      out.write("  </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
