/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.104
 * Generated at: 2025-06-23 08:01:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.vibesync;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.servlet.http.HttpSession;
import mvc.domain.vo.UserVO;

public final class waList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("javax.servlet.http.HttpSession");
    _jspx_imports_classes.add("mvc.domain.vo.UserVO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

  String contextPath = request.getContextPath(); // ex) "/MyApp"
  // [추가] 세션에서 로그인한 사용자 정보와 닉네임 가져오기
  UserVO user = (UserVO) session.getAttribute("userInfo");
  String nickname = "익명"; // 기본값
  if (user != null) {
      nickname = user.getNickname();
  }

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("  <meta charset=\"UTF-8\">\r\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("  <title>User Page - Watch Party</title>\r\n");
      out.write("  <script>\r\n");
      out.write("      const CONTEXT_PATH = '");
      out.print( contextPath );
      out.write("';\r\n");
      out.write("      // [추가] JSP에서 가져온 닉네임을 JS 변수로 설정\r\n");
      out.write("      const NICKNAME = '");
      out.print( nickname );
      out.write("'; \r\n");
      out.write("  </script>\r\n");
      out.write("  <link rel=\"icon\" href=\"./sources/favicon.ico\" />\r\n");
      out.write("  <script src=\"https://www.youtube.com/iframe_api\"></script>\r\n");
      out.write("  <script defer src=\"./js/watchparty.js\"></script>\r\n");
      out.write("<style>\r\n");
      out.write("@import url('https://fonts.googleapis.com/css2?family=Cal+Sans&family=National+Park:wght@200..800&display=swap');\r\n");
      out.write("@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@100..900&display=swap');\r\n");
      out.write("@import url('https://fonts.googleapis.com/css2?family=Kulim+Park:ital,wght@0,200;0,300;0,400;0,600;0,700;1,200;1,300;1,400;1,600;1,700&display=swap');\r\n");
      out.write("/* 최소한의 스타일 */\r\n");
      out.write("body { font-family: \"National Park\", sans-serif; background: #000; color: #fff; width: 100%; margin: 0; }\r\n");
      out.write("#content-wrapper {padding: 40px; max-width: 1200px; margin: 0 auto;}\r\n");
      out.write(".waList-header {display: flex; justify-content: space-between; align-items: center;}\r\n");
      out.write(".tab-buttons { display: flex; gap: 20px; }\r\n");
      out.write(".tab-buttons button {padding: 8px 16px;border: 2px solid #fff;cursor: pointer;border-radius: 9px;color: #fff;background: #000;}\r\n");
      out.write(".tab-buttons button.active { background-color: #5087ffe8; }\r\n");
      out.write(".tab-buttons button:hover { background-color: #82a5f1e8; }\r\n");
      out.write("#list-container{ height: 300px; }\r\n");
      out.write("#list-container, #host-container {border: 1px solid #ccc;padding: 1rem;max-height: 80vh;overflow-y: auto;}\r\n");
      out.write("ul { list-style: none; padding: 0; }\r\n");
      out.write("li { display: flex; justify-content: space-between; align-items: center;padding: 0.5rem; border-bottom: 1px solid #ddd; cursor: pointer; }\r\n");
      out.write("li:hover { background: linear-gradient(90deg, rgb(63 98 133) 0%, rgb(96 21 159 / 64%) 50%, rgb(52 12 65 / 56%) 100%); }\r\n");
      out.write("li img {width: 30px; height: 30px; object-fit: cover; border: 4px solid transparent; border-radius: 50%;background-image: linear-gradient(#000, #000), linear-gradient(90deg, rgba(138, 196, 255, 1) 0%, rgba(227, 176, 255, 1) 50%, rgba(165, 250, 120, 1) 100%);background-origin: border-box;background-clip: content-box, border-box;}\r\n");
      out.write("li div { display: flex; align-items: center; gap: 20px; }\r\n");
      out.write("#btn-add-video { position: absolute; top: 1rem; right: 1rem; font-size: 1.2rem; background: #28a745; color: white; border: none; border-radius: 4px;width: 32px;  height: 32px; line-height: 32px; text-align: center; cursor: pointer; display: none;}\r\n");
      out.write("/* [추가] 호스트 채팅 관련 스타일 */\r\n");
      out.write("#host-container thead { background: black; }\r\n");
      out.write("#chat-wrapper {width: 400px; margin: 0 auto;}\r\n");
      out.write(".host-chat-log { height: 66vh; width: 97%;  overflow-y: auto; border: 1px solid #eee;  margin-bottom: 5px; padding: 5px; font-size: 14px; word-break:break-all; }\r\n");
      out.write(".host-chat-log p { margin: 2px 0; }\r\n");
      out.write(".host-chat { font-weight: bold; color: #ed3030; }\r\n");
      out.write(".chat-input-wrapper input { width: calc(100% - 60px); }\r\n");
      out.write(".chat-input-wrapper button { width: 50px; }\r\n");
      out.write(".chat-input-submit { display: flex; }\r\n");
      out.write("#wp_delete { position: fixed; width: 40px; height: 40px; bottom: 20px; right: 20px; background: #ed3030; border-radius: 50%; border-color: #fff; }\r\n");
      out.write("#wp_delete a img {width: 80%; height: 80%; margin: 0 auto;}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("  <section id=\"content-wrapper\">\r\n");
      out.write("    <div class=\"waList-header\">\r\n");
      out.write("      <h1>Watch Party</h1>\r\n");
      out.write("  \r\n");
      out.write("      <div class=\"tab-buttons\">\r\n");
      out.write("          <button id=\"btn-list\">전체 영상 목록</button>\r\n");
      out.write("          <button id=\"btn-host\">내가 올린 영상</button>\r\n");
      out.write("      </div>\r\n");
      out.write("    </div>\r\n");
      out.write("  \r\n");
      out.write("    <div id=\"list-container\"></div>\r\n");
      out.write("  \r\n");
      out.write("    <button id=\"btn-add-video\">＋</button>\r\n");
      out.write("    <div id=\"host-container\" style=\"display:none;\">\r\n");
      out.write("    </div>\r\n");
      out.write("    \r\n");
      out.write("    <div id=\"add-modal\" style=\"display:none; position:fixed; top:0; left:0; width:100%; height:100%; \r\n");
      out.write("                                background:rgba(0,0,0,0.5); z-index:1000;\">\r\n");
      out.write("        <div id=\"add-modal-content\" style=\"background: #2f2f2f; width:360px; padding:2rem; border-radius:8px;\r\n");
      out.write("                                            position:absolute; top:50%; left:50%; transform:translate(-50%,-50%);\">\r\n");
      out.write("            <h2>새 WatchParty 추가</h2>\r\n");
      out.write("            <form id=\"add-form\">\r\n");
      out.write("                <div style=\"margin-bottom:0.5rem;\">\r\n");
      out.write("                    <label for=\"wp-title\">제목:</label><br/>\r\n");
      out.write("                    <input type=\"text\" id=\"wp-title\" name=\"title\" style=\"width:100%;background: transparent;border-bottom: solid 2px #fff;border-top: none;height: 24px;border-left: none;border-right: none;color: #fff;outline: none;\" placeholder=\"Title\" required />\r\n");
      out.write("                </div>\r\n");
      out.write("                <div style=\"margin-bottom:0.5rem;\">\r\n");
      out.write("                    <label for=\"wp-url\">YouTube URL:</label><br/>\r\n");
      out.write("                    <input type=\"text\" id=\"wp-url\" name=\"url\" style=\"width:100%;background: transparent;border-bottom: solid 2px #fff;border-top: none;height: 24px;border-left: none;border-right: none;color: #fff;outline: none;\" placeholder=\"https://www.youtube.com/watch?v=...\" required />\r\n");
      out.write("                </div>\r\n");
      out.write("                <div style=\"text-align:right;\">\r\n");
      out.write("                    <button type=\"button\" id=\"add-cancel\" style=\"background-color: #e90000; color: #fff; font-weight: bold; border: none; border-radius: 4px; padding: 4px 10px; cursor: pointer;\">취소</button>\r\n");
      out.write("                    <button type=\"submit\" id=\"add-submit\" style=\"background-color: #0086e9; color: #fff; font-weight: bold; border: none; border-radius: 4px; padding: 4px 10px; cursor: pointer;\">추가</button>\r\n");
      out.write("                </div>\r\n");
      out.write("            </form>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("    \r\n");
      out.write("   <button id=\"wp_delete\">\r\n");
      out.write("   <a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/watchparty/watchpartyDelete.do?hostIdx=");
      out.print( user.getAc_idx() );
      out.write("\" onclick=\"return confirm('내가 올린 모든 파티를 삭제하시겠습니까?');\"><img src=\"./sources/icons/off.svg\" alt=\"off\"></a>\r\n");
      out.write("   </button>\r\n");
      out.write("\r\n");
      out.write("  </section>\r\n");
      out.write("  \r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
