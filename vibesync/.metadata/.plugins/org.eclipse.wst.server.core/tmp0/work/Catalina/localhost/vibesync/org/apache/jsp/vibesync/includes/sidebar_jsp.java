/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.104
 * Generated at: 2025-06-23 08:17:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.vibesync.includes;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import mvc.domain.vo.UserVO;

public final class sidebar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1749773114000L));
    _jspx_dependants.put("jar:file:/C:/Class/vibesync/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/vibesync/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("mvc.domain.vo.UserVO");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fchoose;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fotherwise;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fchoose = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fotherwise = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fchoose.release();
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.release();
    _005fjspx_005ftagPool_005fc_005fotherwise.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");


   String contextPath = request.getContextPath() + "/vibesync";


      out.write("\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write(".notion-sidebar{position:relative;display:flex;flex-direction:column;justify-content:space-between;height:100%;width:100%;}\r\n");
      out.write(".notion-sidebar .menu_content{display:flex;justify-content:center;align-items:start;flex-direction:column;gap:40px;font-size:20px;font-weight:bold;margin-left:10px;margin-block:60px;}\r\n");
      out.write(".notion-sidebar .menu_content .nickname{text-decoration:none;color:var(--font-color);}\r\n");
      out.write(".search{display:inline-flex;align-items:center;position:relative;cursor:pointer;}\r\n");
      out.write(".search-input{width:100px;height:22px;background:none;border:none;border-bottom:var(--border-color) 2px solid;color:var(--font-color);}\r\n");
      out.write("input:focus{outline:none;}\r\n");
      out.write("#follow{display:flex;justify-content:start;align-items:center;flex-direction:column;padding:0;height:auto;overflow:hidden;}\r\n");
      out.write(".follow_list label{text-decoration:none;color:var(--font-color);cursor:pointer;}\r\n");
      out.write("#follow_toggle{display:none;}\r\n");
      out.write(".follow_items{list-style:none;padding:0;margin:20px 0 0;max-height:0;overflow:hidden;transition:max-height 0.3s ease-out;}\r\n");
      out.write(".follow_items.show{max-height:500px;transition:max-height 0.3s ease-in;overflow-y:scroll;-ms-overflow-style:none;}\r\n");
      out.write(".follow_items.show::-webkit-scrollbar{display:none;}\r\n");
      out.write(".follow_items li{margin:4px 0;}\r\n");
      out.write(".icon_wrap{display:flex;gap:10px;}\r\n");
      out.write(".nickname-container{width:100%;position:relative;display:inline-block;}\r\n");
      out.write(".profile img{width:min(100px,22vw);height:min(100px,22vw);object-fit:cover;border-radius:50%;aspect-ratio:1/1;margin-bottom:13px;border:4px solid transparent;display:block;background-image:linear-gradient(var(--card-back),var(--card-back)),linear-gradient(90deg,rgba(138,196,255,1) 0%,rgba(227,176,255,1) 50%,rgba(165,250,120,1) 100%);background-origin:border-box;background-clip:content-box,border-box;}\r\n");
      out.write(".nickname{display:inline-block;max-width:150px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;cursor:pointer;padding:2px 4px;}\r\n");
      out.write("#following-btn,#follower-btn{border:0;background:none;margin:0;padding:0;gap:0;}\r\n");
      out.write(".accountDataLabel{font-weight:400;font-size:medium;color:var(--font-color) !important;margin-right:4px;}\r\n");
      out.write(".accountDataValue{font-size:medium;font-weight:bold;background:linear-gradient(90deg,#9b58b6,#3498db,#2ecc71);-webkit-background-clip:text;-webkit-text-fill-color:transparent;margin-right:4px;}\r\n");
      out.write(".modal-sidebar{display:none;position:absolute;top:100%;left:0;background-color:var(--card-back);border:1px solid var(--border-color);border-radius:8px;box-shadow:0 4px 12px rgba(0,0,0,0.15);z-index:1000;white-space:nowrap;width:min(210px,54vw);height:auto;padding:15px;box-sizing:border-box;}\r\n");
      out.write(".modal-nickname{display:block;text-decoration:none;color:var(--modal-font);padding:4px 10px;margin-bottom:10px;font-size:16px;}\r\n");
      out.write(".modal-nickname:hover{text-decoration:underline;}\r\n");
      out.write("#nickname-modal-2{display:none;}\r\n");
      out.write("#nickname-modal-2 .theme-selector-container{width:100%;padding:0;border:none;margin-top:10px;display:flex;flex-direction:column;gap:5px;}\r\n");
      out.write(".modal-btn{width:100%;display:flex;align-items:center;justify-content:center;gap:8px;text-align:center;background:#f8f8fa;color:#222;font-weight:700;font-size:min(17px,4vw);height:38px;border-radius:12px;border:1.8px solid #e1e4ea;margin-bottom:7px;transition:background 0.18s,box-shadow 0.18s;box-shadow:0 1.5px 6px rgba(180,180,200,0.05);letter-spacing:0.2px;outline:none;cursor:pointer;}\r\n");
      out.write(".modal-btn i{font-size:18px;margin-right:2px;color:var(--font-color);}\r\n");
      out.write(".modal-btn img{max-height:22px;max-width:22px;}\r\n");
      out.write("#setting .modal-btn:hover{background:#e6f0fa;color:#1a81d6;border-color:#b9d3ec;}\r\n");
      out.write("#logout .modal-btn:hover{background:#f3e7ea;color:#ed5e68;border-color:#eabec9;}\r\n");
      out.write(".sidebar-follow-span{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}\r\n");
      out.write(".theme-selector-container{display:flex;flex-direction:column;gap:10px;width:220px;padding:20px;border:1px solid #ccc;border-radius:8px;font-family:sans-serif;}\r\n");
      out.write(".theme-option-label{display:flex;align-items:center;padding:6px 10px;border-radius:4px;cursor:pointer;transition:background-color 0.2s;border:1px solid transparent;position:relative;}\r\n");
      out.write(".theme-option-label:hover{background-color:var(--hover-color);}\r\n");
      out.write(".theme-option-label input[type=\"radio\"]{position:absolute;opacity:0;width:0;height:0;}\r\n");
      out.write(".custom-radio{width:20px;height:20px;border:2px solid #ccc;border-radius:50%;margin-right:12px;display:flex;align-items:center;justify-content:center;transition:border-color 0.2s;}\r\n");
      out.write(".custom-radio .inner-circle{width:10px;height:10px;background-color:#3498db;border-radius:50%;transform:scale(0);transition:transform 0.2s ease-in-out;}\r\n");
      out.write(".theme-option-label input[type=\"radio\"]:checked + .custom-radio{border-color:#3498db;background-color:#ddeafd;}\r\n");
      out.write(".theme-option-label input[type=\"radio\"]:checked + .custom-radio .inner-circle{transform:scale(1);}\r\n");
      out.write(".theme-label-text{font-weight:500;font-size:14px;margin-left:10px;}\r\n");
      out.write(".theme-icon-svg{margin-left:auto;}\r\n");
      out.write(".theme-icon-svg img{width:50px;height:auto;display:block;}\r\n");
      out.write("#nickname-modal-2 #back-btn{margin-bottom:10px;}\r\n");
      out.write(".sidebar-profile img{min-width:30px;max-width:30px;height:30px;object-fit:cover;border-radius:50%;margin-right:10px;border:2px solid transparent;display:block;background-image:linear-gradient(var(--card-back),var(--card-back)),linear-gradient(90deg,rgba(138,196,255,1) 0%,rgba(227,176,255,1) 50%,rgba(165,250,120,1) 100%);background-origin:border-box;background-clip:content-box,border-box;}\r\n");
      out.write(".modal-overlay-follow{display:none;position:fixed;top:0;left:0;width:100vw;height:100vh;background:rgba(0,0,0,0.6);justify-content:center;align-items:center;z-index:2000;backdrop-filter:blur(2.5px);}\r\n");
      out.write(".modal-follow-content{background:var(--card-back);border-radius:20px;box-shadow:0 4px 32px 0 rgba(80,110,150,0.10),0 0 0 1.5px #c7d3e8;width:92%;max-width:415px;min-width:310px;min-height:310px;max-height:78vh;display:flex;flex-direction:column;padding-bottom:13px;border:none;animation:zoomIn 0.21s;position:relative;}\r\n");
      out.write(".modal-follow-header{display:flex;justify-content:space-around;border-bottom:2px solid var(--border-color);padding:18px 0 12px 0;flex-shrink:0;color:var(--font-size);font-size:18px;font-weight:700;background:transparent;text-align:center;letter-spacing:0.02em;}\r\n");
      out.write(".modal-follow-tab-btn{background:none;border:none;font-size:18px;font-weight:700;color:#888;cursor:pointer;padding:5px 10px;transition:color 0.2s;}\r\n");
      out.write(".modal-follow-tab-btn.active{color:var(--font-color);border-bottom:2px solid #3498db;}\r\n");
      out.write(".modal-follow-list-container{flex-grow:1;overflow-y:scroll;padding:13px 25px 10px 25px;min-height:150px;display:flex;flex-direction:column;gap:15px;align-items:stretch;justify-content:flex-start;background:transparent;}\r\n");
      out.write(".modal-follow-list-container::-webkit-scrollbar{width: 10px;}\r\n");
      out.write(".modal-follow-list-container::-webkit-scrollbar-thumb{background-image:linear-gradient(90deg, rgba(138, 196, 255, 1) 0%, rgba(227, 176, 255, 1) 50%, rgba(165, 250, 120, 1) 100%);background-origin: border-box;background-clip: content-box, border-box;;border-radius: 10px;}\r\n");
      out.write(".modal-follow-list-container::-webkit-scrollbar-track{background-color: rgba(0,0,0,0);}\r\n");
      out.write(".follow-list-item{display:flex;align-items:center;padding:10px 15px;background:var(--card-back);border-radius:11px;border:2px solid var(--border-color);transition:background-color 0.14s ease-in-out;}\r\n");
      out.write(".follow-list-item:hover{background-color:var(--hover-color);}\r\n");
      out.write(".follow-list-item img{width:min(44px,10vw);height:min(44px,10vw);object-fit:cover;border-radius:50%;margin-right:min(15px,2vw);border:solid 2px transparent;background-image:linear-gradient(var(--card-back),var(--card-back)),linear-gradient(90deg,rgba(138,196,255,1) 0%,rgba(227,176,255,1) 50%,rgba(165,250,120,1) 100%);background-origin:border-box;background-clip:content-box,border-box;}\r\n");
      out.write(".follow-list-item .user-info{flex-grow:1;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}\r\n");
      out.write(".follow-list-item .user-info .nickname{width:100%;font-weight:700;font-size:17px;color:#2d3440;margin-bottom:2px;cursor:pointer;text-decoration:none;}\r\n");
      out.write(".follow-list-item .action-buttons{display:flex;gap:8px;align-items:center;}\r\n");
      out.write(".follow-list-item .action-buttons .follow-toggle-btn{font-size:min(14px,3.4vw);background:#4CAF50;color:white;border:none;border-radius:5px;padding:min(8px,2vw) min(12px,2.4vw);cursor:pointer;font-weight:600;transition:background-color 0.2s;}\r\n");
      out.write(".follow-list-item .action-buttons .follow-toggle-btn.unfollow{background:#f44336;}\r\n");
      out.write(".follow-list-item .action-buttons .follow-toggle-btn:hover{opacity:0.9;}\r\n");
      out.write(".follow-list-item .action-buttons .message-btn{background:#2196F3;color:white;border:none;border-radius:5px;padding:min(11px,2.48vw) min(14px,2.76vw);cursor:pointer;display:flex;align-items:center;justify-content:center;transition:background-color 0.2s;}\r\n");
      out.write(".follow-list-item .action-buttons .message-btn i{font-size:14px;filter:invert(0) !important;}\r\n");
      out.write(".follow-list-item .action-buttons .message-btn:hover{opacity:0.9;}\r\n");
      out.write("@keyframes zoomIn{from{transform:scale(0.97);opacity:0;}to{transform:scale(1);opacity:1;}}\r\n");
      out.write("#messageRoomTitle i{margin-right:9px;color:var(--font-color);font-size:20px;}\r\n");
      out.write(".close-modal{position:absolute;top:6px;right:6px;color:#bcb8ad;font-size:20px;font-weight:400;cursor:pointer;background:none;border:none;border-radius:50%;width:32px;height:32px;display:flex;align-items:center;justify-content:center;transition:background 0.13s,color 0.12s;}\r\n");
      out.write(".close-modal:hover,.close-modal:focus{font-weight:bold;color:var(--font-color);text-decoration:none;}\r\n");
      out.write(".no-message-placeholder{display:flex;flex-direction:column;align-items:center;justify-content:center;color:#888;text-align:center;padding:20px;}\r\n");
      out.write(".no-message-placeholder i{font-size:48px;margin-bottom:16px;color:#e0e0e0;}\r\n");
      out.write(".no-message-placeholder p{margin:0;font-size:1rem;font-weight:500;}\r\n");
      out.write(".message_item{display:flex;align-items:flex-start;gap:15px;width:100%;background:var(--card-back);padding:19px 18px 17px 15px;border-radius:11px;animation:fadeInUp 0.26s;border:2px solid var(--border-color);margin-bottom:18px;transition:background-color 0.14s ease-in-out;}\r\n");
      out.write(".message_item:last-child{margin-bottom:0;}\r\n");
      out.write(".message_item:hover{background-color:var(--hover-color);cursor:pointer;}\r\n");
      out.write("@keyframes fadeInUp{from{opacity:0;transform:translateY(20px);}to{opacity:1;transform:translateY(0);}}\r\n");
      out.write(".message_profile img{width:44px;height:44px;object-fit:cover;border-radius:50%;aspect-ratio:1/1;margin-left:8px;margin-right:5px;border:2px solid transparent;background:#faf9f6;display:block;background-image:linear-gradient(var(--card-back),var(--card-back)),linear-gradient(90deg,rgba(138,196,255,1) 0%,rgba(227,176,255,1) 50%,rgba(165,250,120,1) 100%);background-origin:border-box;background-clip:content-box,border-box;}\r\n");
      out.write(".message_text_area{flex:1 1 auto;min-width:0;max-width:100%;display:flex;flex-direction:column;align-items:flex-start;}\r\n");
      out.write(".message_sender_row{display:flex;align-items:center;gap:7px;margin-bottom:1px;max-width:100%;min-width:0;}\r\n");
      out.write(".message_sender{font-weight:700;font-size:17px;color:var(--font-color);margin-bottom:1px;}\r\n");
      out.write(".message_preview{font-size:14px;font-weight:450;color:var(--msg-sub-font);margin:2px 0 0 0;opacity:0.93;width:100%;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;}\r\n");
      out.write(".message_time{font-size:12px;color:var(--msg-date-font);margin-top:5px;white-space:nowrap;}\r\n");
      out.write(".unread-badge{display:flex;align-items:center;justify-content:center;min-width:20px;height:20px;padding:0 5px;background:#45607d;color:#fff;font-size:12px;font-weight:700;border-radius:50%;box-shadow:0 1px 3px rgba(175,175,160,0.10);margin-left:5px;user-select:none;}\r\n");
      out.write(".chatRoom-modal-super-container .modal-overlay-follow{background:rgba(0,0,0,0.6);backdrop-filter:blur(4px);}\r\n");
      out.write(".modal-follow-content .chatRoom-modal-content{background-color:#f5f8fb;color:#223355;box-shadow:0 6px 30px rgba(0,0,0,0.3);animation:fadeInUp 0.3s ease-out;display:flex;flex-direction:column;max-height:85vh;}\r\n");
      out.write("#chatRoomTitle{padding:18px 24px 16px 24px;margin:0;text-align:center;border-bottom:1.5px solid #e3ecf6;flex-shrink:0;font-size:17px;font-weight:700;}\r\n");
      out.write("#chatRoomHistory{padding:10px;overflow-y:auto;flex-grow:1;}\r\n");
      out.write(".chatRoom-container{display:flex;flex-direction:column;gap:12px;}\r\n");
      out.write(".chatRoom-bubble{max-width:70%;padding:10px 14px;border-radius:18px;box-shadow:0 1px 3px rgba(0,0,0,0.08);text-align:left;word-break:keep-all;overflow-wrap:break-word;white-space:normal;}\r\n");
      out.write(".bubble-me{align-self:flex-end;background-color:#FFFBE7;border:1px solid #FFEAC4;border-bottom-right-radius:4px;}\r\n");
      out.write(".bubble-other{align-self:flex-start;background-color:#fff;border:1px solid #eef1f5;border-bottom-left-radius:4px;}\r\n");
      out.write(".bubble-text{font-size:14px;color:#000;margin:0 0 4px 0;padding:0;}\r\n");
      out.write(".bubble-time{font-size:11px;color:#999;text-align:right;}\r\n");
      out.write(".chatRoom-input-row{display:flex;align-items:center;gap:8px;margin:12px;background:#fff;border-radius:12px;border:1.5px solid #e2e5ea;padding:7px 12px;box-shadow:0 1px 4px rgba(80,110,140,0.08);flex-shrink:0;}\r\n");
      out.write("#chatRoomInput{flex:1;border:none;font-size:15px;color:#23272f;outline:none;padding:8px 0;height:38px;background:none;}\r\n");
      out.write("#chatRoomInput::placeholder{color:#b7b8bd;font-size:14px;}\r\n");
      out.write("#sendMessageBtn{display:flex;align-items:center;justify-content:center;width:38px;height:38px;background:#7fa6c9;border:none;border-radius:50%;transition:background 0.16s;cursor:pointer;padding:0;}\r\n");
      out.write("#sendMessageBtn:hover{background:#45607d;}\r\n");
      out.write(".chatRoom-date-separator{display:inline-block;padding:4px 12px;margin:16px auto;font-size:12px;color:#666;background:#e9ecef;border-radius:12px;text-align:center;}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<button id=\"toggle-btn\">☰</button>\r\n");
      out.write("\r\n");
      out.write("<nav class=\"notion-sidebar-container\" id=\"sidebar\">\r\n");
      out.write("  <div class=\"notion-sidebar\">\r\n");
      out.write("    <div class=\"menu_content\">\r\n");
      out.write("\r\n");
      out.write("      <div class=\"nickname-container\">\r\n");
      out.write("        <span class=\"profile\" id=\"profile-display\">\r\n");
      out.write("          ");
      //  c:choose
      org.apache.taglibs.standard.tag.common.core.ChooseTag _jspx_th_c_005fchoose_005f0 = (org.apache.taglibs.standard.tag.common.core.ChooseTag) _005fjspx_005ftagPool_005fc_005fchoose.get(org.apache.taglibs.standard.tag.common.core.ChooseTag.class);
      _jspx_th_c_005fchoose_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fchoose_005f0.setParent(null);
      int _jspx_eval_c_005fchoose_005f0 = _jspx_th_c_005fchoose_005f0.doStartTag();
      if (_jspx_eval_c_005fchoose_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("             ");
          if (_jspx_meth_c_005fwhen_005f0(_jspx_th_c_005fchoose_005f0, _jspx_page_context))
            return;
          out.write("\r\n");
          out.write("            ");
          //  c:otherwise
          org.apache.taglibs.standard.tag.common.core.OtherwiseTag _jspx_th_c_005fotherwise_005f0 = (org.apache.taglibs.standard.tag.common.core.OtherwiseTag) _005fjspx_005ftagPool_005fc_005fotherwise.get(org.apache.taglibs.standard.tag.common.core.OtherwiseTag.class);
          _jspx_th_c_005fotherwise_005f0.setPageContext(_jspx_page_context);
          _jspx_th_c_005fotherwise_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
          int _jspx_eval_c_005fotherwise_005f0 = _jspx_th_c_005fotherwise_005f0.doStartTag();
          if (_jspx_eval_c_005fotherwise_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
            do {
              out.write("\r\n");
              out.write("               <img src=\"");
              out.print( contextPath );
              out.write("/sources/default/default_user.jpg\" alt=\"기본 프로필\">\r\n");
              out.write("            ");
              int evalDoAfterBody = _jspx_th_c_005fotherwise_005f0.doAfterBody();
              if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                break;
            } while (true);
          }
          if (_jspx_th_c_005fotherwise_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
            return;
          }
          _005fjspx_005ftagPool_005fc_005fotherwise.reuse(_jspx_th_c_005fotherwise_005f0);
          out.write("\r\n");
          out.write("          ");
          int evalDoAfterBody = _jspx_th_c_005fchoose_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fchoose_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return;
      }
      _005fjspx_005ftagPool_005fc_005fchoose.reuse(_jspx_th_c_005fchoose_005f0);
      out.write("\r\n");
      out.write("        </span>\r\n");
      out.write("        <span class=\"nickname\" id=\"nickname-display\">\r\n");
      out.write("          ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userInfo.nickname}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\r\n");
      out.write("        </span>\r\n");
      out.write("        <div class=\"accountData\" id=\"accountData-display\">\r\n");
      out.write("        	<button type=\"button\" id=\"following-btn\" class=\"modal-follow-message\">\r\n");
      out.write("               <span class=\"accountDataLabel\">팔로잉</span><span class=\"accountDataValue\"></span>\r\n");
      out.write("            </button>\r\n");
      out.write("            <button type=\"button\" id=\"follower-btn\" class=\"modal-follow-message\">\r\n");
      out.write("				<span class=\"accountDataLabel\">팔로워</span><span class=\"accountDataValue\"></span>\r\n");
      out.write("			</button>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div id=\"nickname-modal\" class=\"modal-sidebar\">\r\n");
      out.write("          <div id=\"nickname-modal-1\">\r\n");
      out.write("             <a href=\"userPage.do?acIdx=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userInfo.ac_idx}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" class=\"modal-nickname\">\r\n");
      out.write("               ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userInfo.nickname}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\r\n");
      out.write("             </a>\r\n");
      out.write("             <div id=\"setting\">\r\n");
      out.write("               <button type=\"button\" id=\"setting-btn\" class=\"modal-btn\">\r\n");
      out.write("                  <img src=\"./sources/icons/settings.svg\" alt=\"setting icon\"> Theme\r\n");
      out.write("               </button>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div id=\"logout\">\r\n");
      out.write("              <form action=\"user.do\" method=\"post\">\r\n");
      out.write("                <input type=\"hidden\" name=\"accessType\" value=\"logout\">\r\n");
      out.write("                <button type=\"submit\" class=\"modal-btn\">\r\n");
      out.write("                   <i class=\"fa-solid fa-right-from-bracket\"></i> Logout\r\n");
      out.write("                </button>\r\n");
      out.write("              </form>\r\n");
      out.write("            </div>\r\n");
      out.write("         </div>\r\n");
      out.write("         <div id=\"nickname-modal-2\">\r\n");
      out.write("           <button type=\"button\" id=\"back-btn\" class=\"modal-btn\">\r\n");
      out.write("               <i class=\"fa-solid fa-arrow-left\"></i> 뒤로가기\r\n");
      out.write("           </button>\r\n");
      out.write("         <div class=\"theme-selector-container\">\r\n");
      out.write("           \r\n");
      out.write("           <label class=\"theme-option-label\">\r\n");
      out.write("             <input type=\"radio\" name=\"theme\" value=\"light\" ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.theme == 'light' || empty sessionScope.theme ? 'checked' : ''}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(">\r\n");
      out.write("             <div class=\"custom-radio\">\r\n");
      out.write("               <div class=\"inner-circle\"></div>\r\n");
      out.write("             </div>\r\n");
      out.write("             <span class=\"theme-label-text\">Light</span>\r\n");
      out.write("             <div class=\"theme-icon-svg\">\r\n");
      out.write("               <img src=\"./sources/sidebar/light_icon.svg\">\r\n");
      out.write("             </div>\r\n");
      out.write("           </label>\r\n");
      out.write("         \r\n");
      out.write("           <label class=\"theme-option-label\">\r\n");
      out.write("             <input type=\"radio\" name=\"theme\" value=\"dark\" ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.theme == 'dark' ? 'checked' : ''}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(">\r\n");
      out.write("             <div class=\"custom-radio\">\r\n");
      out.write("                 <div class=\"inner-circle\"></div>\r\n");
      out.write("             </div>\r\n");
      out.write("             <span class=\"theme-label-text\">Dark</span>\r\n");
      out.write("             <div class=\"theme-icon-svg\">\r\n");
      out.write("               <img src=\"./sources/sidebar/dark_icon.svg\">\r\n");
      out.write("             </div>\r\n");
      out.write("           </label>\r\n");
      out.write("         \r\n");
      out.write("         </div>\r\n");
      out.write("         </div>\r\n");
      out.write("        </div>\r\n");
      out.write("      </div>\r\n");
      out.write("      <!-- <div class=\"search icon_wrap\">\r\n");
      out.write("        <img src=\"./sources/icons/search.svg\" alt=\"search icon\" class=\"sidebar_icon\">\r\n");
      out.write("        <input type=\"text\" class=\"search-input\" placeholder=\"Search…\">\r\n");
      out.write("      </div> -->\r\n");
      out.write("\r\n");
      out.write("      <a href=\"main.do\" class=\"home icon_wrap\">\r\n");
      out.write("        <img src=\"./sources/icons/home.svg\" alt=\"home icon\" class=\"sidebar_icon\">\r\n");
      out.write("        <span>HOME</span>\r\n");
      out.write("      </a>\r\n");
      out.write("\r\n");
      out.write("      <a href=\"workspace.do\" class=\"workspace icon_wrap\">\r\n");
      out.write("        <img src=\"./sources/icons/work.svg\" alt=\"workspace icon\" class=\"sidebar_icon\">\r\n");
      out.write("        <span>WORKSPACE</span>\r\n");
      out.write("      </a>\r\n");
      out.write("      \r\n");
      out.write("      <a href=\"page.do\" class=\"workspace icon_wrap\">\r\n");
      out.write("        <img src=\"./sources/icons/page.svg\" alt=\"workspace icon\" class=\"sidebar_icon\">\r\n");
      out.write("        <span>PAGES</span>\r\n");
      out.write("      </a>\r\n");
      out.write("\r\n");
      out.write("      <div id=\"follow\">\r\n");
      out.write("        <div class=\"follow_list\" id=\"followButton\">\r\n");
      out.write("          <div class=\"follow_tag icon_wrap\">\r\n");
      out.write("            <img src=\"./sources/icons/follow.svg\" alt=\"follow icon\" class=\"sidebar_icon\">\r\n");
      out.write("            <label for=\"follow_toggle\">FOLLOW</label>\r\n");
      out.write("          </div>\r\n");
      out.write("          \r\n");
      out.write("          <form id=\"followForm_side\">\r\n");
      out.write("          </form>\r\n");
      out.write("\r\n");
      out.write("          <ul class=\"follow_items\">\r\n");
      out.write("            </ul>\r\n");
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("      </div>\r\n");
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("  </div>\r\n");
      out.write("  \r\n");
      out.write("  <!-- 팔로잉/팔로워/메시지 모달창 -->\r\n");
      out.write("<div id=\"followListModal\" class=\"modal-overlay-follow\">\r\n");
      out.write("    <div class=\"modal-follow-content\">\r\n");
      out.write("        <span class=\"close-modal\">&times;</span>\r\n");
      out.write("        <div class=\"modal-follow-header\">\r\n");
      out.write("            <button type=\"button\" class=\"modal-follow-tab-btn\" data-tab-type=\"following\">팔로잉</button>\r\n");
      out.write("            <button type=\"button\" class=\"modal-follow-tab-btn\" data-tab-type=\"follower\">팔로워</button>\r\n");
      out.write("            <button type=\"button\" class=\"modal-follow-tab-btn\" data-tab-type=\"message\">메시지</button>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div id=\"followListContent\" class=\"modal-follow-list-container\">\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<!-- 채팅방 모달창 -->\r\n");
      out.write("<div id=\"chatRoomModal\" class=\"chatRoom-modal-super-container modal-overlay-follow\">\r\n");
      out.write("  <div class=\"modal-follow-content chatRoom-modal-content\">\r\n");
      out.write("    <button class=\"close-modal\" onclick=\"closechatRoomModal()\">&times;</button>\r\n");
      out.write("    <h2 id=\"chatRoomTitle\"></h2>\r\n");
      out.write("    <div id=\"chatRoomHistory\"></div>\r\n");
      out.write("    <div class=\"chatRoom-input-row\">\r\n");
      out.write("      <input id=\"chatRoomInput\" placeholder=\"메시지를 입력하세요…\" />\r\n");
      out.write("      <button id=\"sendMessageBtn\" onclick=\"sendchatRoomMessage()\">\r\n");
      out.write("        <i class=\"fa-solid fa-paper-plane\"></i>\r\n");
      out.write("      </button>\r\n");
      out.write("    </div>\r\n");
      out.write("  </div>\r\n");
      out.write("</div>\r\n");
      out.write("  \r\n");
      out.write("</nav>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("$(document).ready(function() {\r\n");
      out.write("   // 페이지 로드될 때 팔로워 수 불러오기\r\n");
      out.write("   updateFollowCount();\r\n");
      out.write("   \r\n");
      out.write("   var isExpanded = false;\r\n");
      out.write("\r\n");
      out.write("    $('#followButton').on('click', function(e) {\r\n");
      out.write("        // [수정] 클릭된 대상이 <a> 태그이거나 그 자식일 경우, 아무것도 하지 않고 기본 동작(링크 이동)을 허용\r\n");
      out.write("        if ($(e.target).closest('a').length) {\r\n");
      out.write("            return;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // 링크가 아닌 다른 곳을 클릭했을 때만 아래 로직 실행\r\n");
      out.write("        e.preventDefault();\r\n");
      out.write("\r\n");
      out.write("        var $ul = $('.follow_items');\r\n");
      out.write("        var $followDiv = $('#follow');\r\n");
      out.write("\r\n");
      out.write("        if (isExpanded) {\r\n");
      out.write("            $ul.empty();\r\n");
      out.write("            $ul.removeClass('show');\r\n");
      out.write("            isExpanded = false;\r\n");
      out.write("            return;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        $.ajax({\r\n");
      out.write("            type: 'GET',\r\n");
      out.write("            url: '");
      out.print( request.getContextPath() );
      out.write("/follow.do',\r\n");
      out.write("            data: {action: 'getFollowing'},\r\n");
      out.write("            dataType: 'json',\r\n");
      out.write("            success: function(response) {\r\n");
      out.write("                var items = response;\r\n");
      out.write("                $ul.empty();\r\n");
      out.write("\r\n");
      out.write("                if (!items || items.length === 0) {\r\n");
      out.write("                    $ul.append('<li><p>No Follower</p></li>');\r\n");
      out.write("                } else {\r\n");
      out.write("                    $.each(items, function(i, user) {\r\n");
      out.write("                    	let profileImg = user.profile_img != null ? user.profile_img : '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/vibesync/sources/default/default_user.jpg';\r\n");
      out.write("                    	\r\n");
      out.write("                        var liHtml = ''\r\n");
      out.write("                            + '<li class=\"sidebar-profile\">'\r\n");
      out.write("                            +   '<a href=\"userPage.do?acIdx=' + user.ac_idx + '\">' \r\n");
      out.write("                            +     '<img src=\"'+ profileImg +'\" alt=\"profileImg\">'\r\n");
      out.write("                            +     '<span class=\"sidebar-follow-span\">'+ user.nickname +'</span>' \r\n");
      out.write("                            +   '</a>'\r\n");
      out.write("                            + '</li>';\r\n");
      out.write("                        $ul.append(liHtml);\r\n");
      out.write("                    });\r\n");
      out.write("                }\r\n");
      out.write("                \r\n");
      out.write("                $ul.addClass('show');\r\n");
      out.write("                isExpanded = true;\r\n");
      out.write("            },\r\n");
      out.write("            error: function(xhr, status, error) {\r\n");
      out.write("                console.error('AJAX Error:', error);\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // 닉네임 클릭 시 모달 토글\r\n");
      out.write("    $('#nickname-display').on('click', function(e) {\r\n");
      out.write("        e.stopPropagation(); // 이벤트 버블링 방지\r\n");
      out.write("        $('#nickname-modal').toggle();\r\n");
      out.write("\r\n");
      out.write("        // 모달이 열릴 때 항상 첫 화면을 보여주도록 초기화\r\n");
      out.write("        $('#nickname-modal-1').show();\r\n");
      out.write("        $('#nickname-modal-2').hide();\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // 'Setting' 버튼 클릭 시 설정 화면으로 전환\r\n");
      out.write("    $('#setting-btn').on('click', function() {\r\n");
      out.write("        $('#nickname-modal-1').hide();\r\n");
      out.write("        $('#nickname-modal-2').show();\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // '뒤로가기' 버튼 클릭 시 이전 화면으로 복귀\r\n");
      out.write("    $('#back-btn').on('click', function() {\r\n");
      out.write("        $('#nickname-modal-2').hide();\r\n");
      out.write("        $('#nickname-modal-1').show();\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // 모달 외부 클릭 시 모달 닫기\r\n");
      out.write("    $(document).on('click', function(e) {\r\n");
      out.write("        // 모달 자신이나 모달을 연 버튼이 아닌 곳을 클릭했을 때\r\n");
      out.write("        if ($(e.target).closest('#nickname-modal, #nickname-display').length === 0) {\r\n");
      out.write("            $('#nickname-modal').hide();\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("    \r\n");
      out.write("/* 팔로잉/팔로워/메시지 모달창 */\r\n");
      out.write("    \r\n");
      out.write("    // 팔로잉/팔로워 버튼 클릭 시 모달 열기\r\n");
      out.write("    $('#following-btn, #follower-btn').on('click', function() {\r\n");
      out.write("        let defaultTab = $(this).attr('id') === 'following-btn' ? 'following' : 'follower';\r\n");
      out.write("        openFollowListModal(defaultTab);\r\n");
      out.write("    });\r\n");
      out.write("    \r\n");
      out.write("    // 모달 내 탭 버튼 클릭 이벤트\r\n");
      out.write("    $(document).on('click', '.modal-follow-tab-btn', function() {\r\n");
      out.write("        $('.modal-follow-tab-btn').removeClass('active');\r\n");
      out.write("        $(this).addClass('active');\r\n");
      out.write("        let tabType = $(this).data('tab-type');\r\n");
      out.write("        loadFollowListData(tabType);\r\n");
      out.write("    });\r\n");
      out.write("    \r\n");
      out.write("    // 팔로우/언팔로우 버튼 클릭 이벤트\r\n");
      out.write("    $(document).on('click', '.follow-toggle-btn', function(e) {\r\n");
      out.write("        e.stopPropagation(); // 버블링 막기 (상위 아이템 클릭 방지)\r\n");
      out.write("        const targetAcIdx = $(this).data('target-ac-idx');\r\n");
      out.write("        const isFollowing = $(this).hasClass('unfollow'); // 현재 팔로잉 중이면 unfollow 클래스가 있음\r\n");
      out.write("        const $button = $(this);\r\n");
      out.write("    \r\n");
      out.write("        $.ajax({\r\n");
      out.write("            url: '");
      out.print( request.getContextPath() );
      out.write("/followToggle.do',\r\n");
      out.write("            type: 'POST',\r\n");
      out.write("            data: { \r\n");
      out.write("                authorId: targetAcIdx\r\n");
      out.write("            },\r\n");
      out.write("            dataType: 'json',\r\n");
      out.write("            success: function(response) {\r\n");
      out.write("                if (response.success) {\r\n");
      out.write("                    if (response.following) { // 서버 응답에 따라 상태 변경\r\n");
      out.write("                        $button.removeClass('unfollow').text('팔로잉');\r\n");
      out.write("                    } else {\r\n");
      out.write("                        $button.addClass('unfollow').text('팔로우');\r\n");
      out.write("                    }\r\n");
      out.write("                    // 사이드바의 팔로워/팔로잉 카운트 업데이트\r\n");
      out.write("                    updateFollowCount();\r\n");
      out.write("                } else {\r\n");
      out.write("                    alert('팔로우/언팔로우 처리 실패: ' + (response.message || '알 수 없는 오류'));\r\n");
      out.write("                }\r\n");
      out.write("            },\r\n");
      out.write("            error: function(xhr, status, error) {\r\n");
      out.write("                alert('팔로우 요청 중 오류 발생: ' + error);\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("    });\r\n");
      out.write("    \r\n");
      out.write("    // 팔로우/팔로잉 목록 내 메시지 버튼 클릭 이벤트 (동적으로 생성되므로 위임 사용)\r\n");
      out.write("    $(document).on('click', '.message-btn-in-modal', function(e) {\r\n");
      out.write("        e.stopPropagation();\r\n");
      out.write("        const targetAcIdx = $(this).data('target-ac-idx');\r\n");
      out.write("        const nickname = $(this).data('nickname');\r\n");
      out.write("        openchatRoomWithUser(targetAcIdx, nickname);\r\n");
      out.write("    });\r\n");
      out.write("    \r\n");
      out.write("    // 메시지 목록 내 클릭\r\n");
      out.write("	$(document).on('click', '.message_item', function(e){\r\n");
      out.write("	  e.stopPropagation();\r\n");
      out.write("	  const idx      = $(this).data('sender-idx');\r\n");
      out.write("	  const nickname = $(this).data('nickname');\r\n");
      out.write("	  openchatRoomWithUser(idx, nickname);\r\n");
      out.write("	});\r\n");
      out.write("    \r\n");
      out.write("    // 모달 닫기 버튼\r\n");
      out.write("    $(document).on('click', '#followListModal .close-modal', function() {\r\n");
      out.write("        closeFollowListModal();\r\n");
      out.write("    });\r\n");
      out.write("    \r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<script> /* 함수 */\r\n");
      out.write("\r\n");
      out.write("function updateFollowCount() {\r\n");
      out.write("	updateFollowingCount();\r\n");
      out.write("	updateFollowerCount();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function updateFollowingCount() {\r\n");
      out.write("    $.ajax({\r\n");
      out.write("        type: 'GET',\r\n");
      out.write("        url: '");
      out.print( request.getContextPath() );
      out.write("/follow.do',\r\n");
      out.write("        cache: 'no-store',\r\n");
      out.write("        data: {action: 'getFollowingCount'},\r\n");
      out.write("        dataType: 'json',\r\n");
      out.write("        success: function(followingCount) {\r\n");
      out.write("            $(\"#following-btn\").find(\".accountDataValue\").text(followingCount);\r\n");
      out.write("        },\r\n");
      out.write("        error: function(xhr, status, error) {\r\n");
      out.write("            console.error('AJAX Error:', error);\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function updateFollowerCount() {\r\n");
      out.write("    $.ajax({\r\n");
      out.write("        type: 'GET',\r\n");
      out.write("        url: '");
      out.print( request.getContextPath() );
      out.write("/follow.do',\r\n");
      out.write("        cache: 'no-store',\r\n");
      out.write("        data: {action: 'getFollowerCount'},\r\n");
      out.write("        dataType: 'json',\r\n");
      out.write("        success: function(followerCount) {\r\n");
      out.write("            $(\"#follower-btn\").find(\".accountDataValue\").text(followerCount);\r\n");
      out.write("        },\r\n");
      out.write("        error: function(xhr, status, error) {\r\n");
      out.write("            console.error('AJAX Error:', error);\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 팔로잉/팔로워/메시지 모달 열기 함수\r\n");
      out.write("function openFollowListModal(defaultTab = 'following') {\r\n");
      out.write("    const isLoggedIn = ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.userInfo != null}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(";\r\n");
      out.write("    if (!isLoggedIn) {\r\n");
      out.write("        alert(\"로그인이 필요합니다.\");\r\n");
      out.write("        location.href = \"");
      out.print( request.getContextPath() );
      out.write("/vibesync/user.do\";\r\n");
      out.write("        return;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    $('#followListModal').css('display', 'flex');\r\n");
      out.write("    $('.modal-follow-tab-btn').removeClass('active');\r\n");
      out.write("    \r\n");
      out.write("    // 기본 탭 활성화 및 데이터 로드\r\n");
      out.write("    $(`.modal-follow-tab-btn[data-tab-type=\"${defaultTab}\"]`).addClass('active');\r\n");
      out.write("    loadFollowListData(defaultTab);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 팔로잉/팔로워/메시지 데이터 로드 함수\r\n");
      out.write("function loadFollowListData(tabType) {\r\n");
      out.write("    const listContainer = $('#followListContent');\r\n");
      out.write("    listContainer.empty().html('<p style=\"text-align:center; padding: 20px;\">로딩 중...</p>'); // 로딩 스피너\r\n");
      out.write("\r\n");
      out.write("    const basePath = '");
      out.print( contextPath );
      out.write("/';\r\n");
      out.write("\r\n");
      out.write("    let apiUrl;\r\n");
      out.write("    let requestData;\r\n");
      out.write("\r\n");
      out.write("    if (tabType === 'following') {\r\n");
      out.write("        apiUrl = '");
      out.print( request.getContextPath() );
      out.write("/follow.do';\r\n");
      out.write("        requestData = { action: 'getFollowing' };\r\n");
      out.write("    } else if (tabType === 'follower') {\r\n");
      out.write("        apiUrl = '");
      out.print( request.getContextPath() );
      out.write("/follow.do';\r\n");
      out.write("        requestData = { action: 'getFollower' };\r\n");
      out.write("    } else if (tabType === 'message') {\r\n");
      out.write("        apiUrl = '");
      out.print( request.getContextPath() );
      out.write("/message.do';\r\n");
      out.write("        requestData = { view: 'LISTALL' };\r\n");
      out.write("    } else {\r\n");
      out.write("        listContainer.html('<p style=\"text-align:center; padding: 20px;\">잘못된 탭 요청입니다.</p>');\r\n");
      out.write("        return;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    $.ajax({\r\n");
      out.write("        url: apiUrl,\r\n");
      out.write("        type: 'GET',\r\n");
      out.write("        data: requestData,\r\n");
      out.write("        dataType: 'json',\r\n");
      out.write("        success: function(response) {\r\n");
      out.write("            listContainer.empty();\r\n");
      out.write("            if (tabType === 'following' || tabType === 'follower') {\r\n");
      out.write("                const list = response;\r\n");
      out.write("                if (!list || list.length === 0) {\r\n");
      out.write("                    listContainer.html('<p class=\"no-message-placeholder\"><i class=\"fa-solid fa-users\"></i><p>목록이 비어있습니다.</p></p>');\r\n");
      out.write("                    return;\r\n");
      out.write("                }\r\n");
      out.write("                list.forEach(user => {\r\n");
      out.write("                	const profileImg = user.profile_img ? `");
      out.print( request.getContextPath() );
      out.write("/vibesync/${user.profile_img}` : `${basePath}sources/default/default_user.jpg`;\r\n");
      out.write("                    const isFollowing = user.followedByCurrentUser;\r\n");
      out.write("                    const followButtonText = isFollowing ? '팔로잉' : '팔로우';\r\n");
      out.write("                    const followButtonClass = isFollowing ? 'follow-toggle-btn unfollow' : 'follow-toggle-btn';\r\n");
      out.write("\r\n");
      out.write("                    const itemHtml = `\r\n");
      out.write("                        <div class=\"follow-list-item\">\r\n");
      out.write("                            <img src=\"${profileImg}\" alt=\"프로필\">\r\n");
      out.write("                            <div class=\"user-info\">\r\n");
      out.write("                                <a href=\"userPage.do?acIdx=${user.ac_idx}\" class=\"nickname\">${user.nickname}</a>\r\n");
      out.write("                            </div>\r\n");
      out.write("                            <div class=\"action-buttons\">\r\n");
      out.write("                            	<button type=\"button\" class=\"${followButtonClass}\" data-target-ac-idx=\"${user.ac_idx}\">\r\n");
      out.write("                                	${followButtonText}\r\n");
      out.write("                                </button>\r\n");
      out.write("                                <button type=\"button\" class=\"message-btn message-btn-in-modal\" data-target-ac-idx=\"${user.ac_idx}\" data-nickname=\"${user.nickname}\">\r\n");
      out.write("                                	<i class=\"fa-solid fa-paper-plane\"></i>\r\n");
      out.write("                                </button>\r\n");
      out.write("                            </div>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    `;\r\n");
      out.write("                    listContainer.append(itemHtml);\r\n");
      out.write("                });\r\n");
      out.write("            } else if (tabType === 'message') {\r\n");
      out.write("                const messageList = response;\r\n");
      out.write("                if (!messageList || !Array.isArray(messageList) || messageList.length === 0) {\r\n");
      out.write("                    const placeholderHtml = `\r\n");
      out.write("                        <div class=\"no-message-placeholder\">\r\n");
      out.write("                            <i class=\"fa-regular fa-comments\"></i>\r\n");
      out.write("                            <p>메시지 내역이 없습니다.</p>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    `;\r\n");
      out.write("                    listContainer.html(placeholderHtml);\r\n");
      out.write("                    return;\r\n");
      out.write("                }\r\n");
      out.write("                messageList.forEach(message => {\r\n");
      out.write("                    let profileImgHtml = message.other.profile_img ?\r\n");
      out.write("                    	`<img src=\"");
      out.print( request.getContextPath() );
      out.write("/vibesync/${message.other.profile_img}\" alt=\"profile\">` :\r\n");
      out.write("                    	`<img src=\"${basePath}sources/default/default_user.jpg\" alt=\"기본 프로필\">`;\r\n");
      out.write("\r\n");
      out.write("                    let unreadBadgeHtml = '';\r\n");
      out.write("                    if (message.numOfUnreadMessages > 0) {\r\n");
      out.write("                        unreadBadgeHtml = `<span class=\"unread-badge\">${message.numOfUnreadMessages}</span>`;\r\n");
      out.write("                    }\r\n");
      out.write("                    \r\n");
      out.write("                    const messageHtml = `\r\n");
      out.write("                        <div class=\"message_item\" data-sender-idx=\"${message.other.ac_idx}\" data-nickname=\"${message.other.nickname}\">\r\n");
      out.write("                            <div class=\"message_profile\">\r\n");
      out.write("                                ${profileImgHtml}\r\n");
      out.write("                            </div>\r\n");
      out.write("                            <div class=\"message_text_area\">\r\n");
      out.write("                                <div class=\"message_sender_row\">\r\n");
      out.write("                                    <div class=\"message_sender\">${message.other.nickname}</div>\r\n");
      out.write("                                    ${unreadBadgeHtml}\r\n");
      out.write("                                </div>\r\n");
      out.write("                                <div class=\"message_preview\">${message.latestMessage.text}</div>\r\n");
      out.write("                                <div class=\"message_time\">${message.latestMessage.relativeTime}</div>\r\n");
      out.write("                            </div>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    `;\r\n");
      out.write("                    listContainer.append(messageHtml);\r\n");
      out.write("                });\r\n");
      out.write("            }\r\n");
      out.write("        },\r\n");
      out.write("        error: function(xhr, status, error) {\r\n");
      out.write("            listContainer.html('<p style=\"text-align:center; padding: 20px; color: red;\">데이터 로드 실패: ' + (xhr.responseJSON ? xhr.responseJSON.message : error) + '</p>');\r\n");
      out.write("            console.error('Failed to load follow/message list:', error);\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//팔로잉/팔로워/메시지 모달 닫기 함수\r\n");
      out.write("function closeFollowListModal() {\r\n");
      out.write("    $('#followListModal').hide();\r\n");
      out.write("    $('#followListContent').empty(); // 내용 비우기\r\n");
      out.write("    // 닫을 때 현재 채팅 모달이 열려있다면 닫지 않음\r\n");
      out.write("    if ($('#chatRoomModal').is(':visible')) {\r\n");
      out.write("        // 이미 채팅 모달이 열려있다면, 메시지 목록 모달만 닫음\r\n");
      out.write("    } else {\r\n");
      out.write("        window.location.hash = \"\"; // URL 해시 초기화\r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//특정 유저와의 채팅창 열기 함수\r\n");
      out.write("function openchatRoomWithUser(userIdx, nickname) {	\r\n");
      out.write("    currentchatRoomSenderIdx = userIdx;\r\n");
      out.write("    $('#chatRoomTitle').text(nickname + '님과의 대화');\r\n");
      out.write("    $('#chatRoomHistory').html('<p style=\"text-align:center; padding: 20px;\">대화 내역을 불러오는 중...</p>'); // 로딩 표시\r\n");
      out.write("    \r\n");
      out.write("    closeFollowListModal(); // 팔로잉/팔로워/메시지 목록 모달이 열려있었다면 닫기\r\n");
      out.write("\r\n");
      out.write("    $.ajax({\r\n");
      out.write("        url: '");
      out.print( request.getContextPath() );
      out.write("/message.do',\r\n");
      out.write("        type: 'GET',\r\n");
      out.write("        data: { sender_idx: userIdx, view: 'CHAT' },\r\n");
      out.write("        dataType: 'json',\r\n");
      out.write("		success: function (chatRoomList) {\r\n");
      out.write("		    $('#chatRoomHistory').empty();\r\n");
      out.write("		    \r\n");
      out.write("		    if (!chatRoomList || !Array.isArray(chatRoomList) || chatRoomList.length === 0) {\r\n");
      out.write("		        $('#chatRoomHistory').html('<p style=\"text-align:center; color:grey; padding: 20px;\">아직 대화 내역이 없습니다.</p>');\r\n");
      out.write("		    } else {\r\n");
      out.write("		        const chatRoomContainer = $('<div class=\"chatRoom-container\"></div>');\r\n");
      out.write("		        let lastDate = null;\r\n");
      out.write("		        chatRoomList.forEach(message => {\r\n");
      out.write("		            if (message.date !== lastDate) {\r\n");
      out.write("		                lastDate = message.date;\r\n");
      out.write("		                const dateLabel = $('<div class=\"chatRoom-date-separator\"></div>').text(lastDate);\r\n");
      out.write("		                chatRoomContainer.append(dateLabel);\r\n");
      out.write("		            }\r\n");
      out.write("		            const who = message.isMine ? 'bubble-me' : 'bubble-other';\r\n");
      out.write("		            const formattedText = message.text.replace(/\\n/g, '<br>');\r\n");
      out.write("		            const messageHtml = `\r\n");
      out.write("		                <div class=\"chatRoom-bubble ${who}\">\r\n");
      out.write("		                    <div class=\"bubble-text\">${formattedText}</div>\r\n");
      out.write("		                    <div class=\"bubble-time\">${message.relativeTime}</div>\r\n");
      out.write("		                </div>`;\r\n");
      out.write("		            chatRoomContainer.append(messageHtml);\r\n");
      out.write("		        });\r\n");
      out.write("		        $('#chatRoomHistory').append(chatRoomContainer);\r\n");
      out.write("		    }\r\n");
      out.write("		\r\n");
      out.write("		    $('#chatRoomModal').css('display', 'flex');\r\n");
      out.write("		    $('#chatRoomHistory').scrollTop($('#chatRoomHistory')[0].scrollHeight); // 스크롤 맨 아래로\r\n");
      out.write("		},\r\n");
      out.write("		error: function () {\r\n");
      out.write("		    alert('채팅 내역을 불러오는 데 실패했습니다.');\r\n");
      out.write("		}\r\n");
      out.write("    });\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//채팅 모달 닫기\r\n");
      out.write("function closechatRoomModal() {\r\n");
      out.write("    $('#chatRoomModal').hide();\r\n");
      out.write("    currentchatRoomSenderIdx = null; // 현재 채팅 상대 초기화\r\n");
      out.write("    // 메시지 목록을 다시 열어서 unread 카운트를 갱신\r\n");
      out.write("    openFollowListModal('message');\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//채팅 메시지 전송\r\n");
      out.write("function sendchatRoomMessage() {\r\n");
      out.write("    const message = $(\"#chatRoomInput\").val().trim();\r\n");
      out.write("    if (!message || !currentchatRoomSenderIdx) return;\r\n");
      out.write("\r\n");
      out.write("    $.ajax({\r\n");
      out.write("        url: '");
      out.print( request.getContextPath() );
      out.write("/message.do',\r\n");
      out.write("        type: 'POST',\r\n");
      out.write("        data: JSON.stringify({\r\n");
      out.write("            receiver_idx: currentchatRoomSenderIdx,\r\n");
      out.write("            text: message\r\n");
      out.write("        }),\r\n");
      out.write("        contentType: \"application/json; charset=utf-8\",\r\n");
      out.write("        dataType: 'json',\r\n");
      out.write("        success: function(res) {\r\n");
      out.write("            if(res.success) {\r\n");
      out.write("                $(\"#chatRoomInput\").val(\"\"); // 입력창 비우기\r\n");
      out.write("                reloadchatRoomHistory(); // 채팅 내역 갱신\r\n");
      out.write("            } else {\r\n");
      out.write("                alert('메시지 전송에 실패했습니다.');\r\n");
      out.write("            }\r\n");
      out.write("        },\r\n");
      out.write("        error: function() { alert('메시지 전송 중 오류 발생!'); }\r\n");
      out.write("    });\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//채팅 내역 새로고침\r\n");
      out.write("function reloadchatRoomHistory() {\r\n");
      out.write("    if (currentchatRoomSenderIdx) {\r\n");
      out.write("        const currentNickname = $('#chatRoomTitle').text().replace('님과의 대화', '');\r\n");
      out.write("        openchatRoomWithUser(currentchatRoomSenderIdx, currentNickname);\r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("$(document).ready(function() {\r\n");
      out.write("    $(\"#chatRoomInput\").on(\"keydown\", function(event) {\r\n");
      out.write("        if (event.key === \"Enter\" && !event.shiftKey) {\r\n");
      out.write("            event.preventDefault();\r\n");
      out.write("            sendchatRoomMessage();\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("<script src=\"");
      out.print( request.getContextPath() );
      out.write("/vibesync/js/theme.js\"></script>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fwhen_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fchoose_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:when
    org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f0 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
    _jspx_th_c_005fwhen_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fwhen_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
    // /vibesync/includes/sidebar.jsp(123,13) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fwhen_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty userInfo.img}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
    int _jspx_eval_c_005fwhen_005f0 = _jspx_th_c_005fwhen_005f0.doStartTag();
    if (_jspx_eval_c_005fwhen_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      do {
        out.write("\r\n");
        out.write("                <img src=\"");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
        out.write("/vibesync/");
        out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userInfo.img}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
        out.write("\" alt=\"프로필\">\r\n");
        out.write("            ");
        int evalDoAfterBody = _jspx_th_c_005fwhen_005f0.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
    }
    if (_jspx_th_c_005fwhen_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f0);
    return false;
  }
}
