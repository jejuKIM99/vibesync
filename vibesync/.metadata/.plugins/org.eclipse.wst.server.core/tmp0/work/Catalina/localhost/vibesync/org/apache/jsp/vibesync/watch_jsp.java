/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.104
 * Generated at: 2025-06-20 08:07:40 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.vibesync;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import mvc.persistence.dao.WatchPartyDAO;
import com.util.ConnectionProvider;
import java.sql.Connection;
import mvc.domain.vo.UserVO;
import mvc.domain.vo.WatchPartyVO;
import mvc.persistence.daoImpl.WatchPartyDAOImpl;

public final class watch_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(8);
    _jspx_imports_classes.add("mvc.persistence.dao.WatchPartyDAO");
    _jspx_imports_classes.add("mvc.persistence.daoImpl.WatchPartyDAOImpl");
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("mvc.domain.vo.WatchPartyVO");
    _jspx_imports_classes.add("mvc.domain.vo.UserVO");
    _jspx_imports_classes.add("com.util.ConnectionProvider");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

String contextPath = request.getContextPath();
UserVO user = (UserVO) session.getAttribute("userInfo");
String nickname = "익명";
if (user != null) {
    nickname = user.getNickname();
}
    String strIdx = request.getParameter("watchPartyIdx");
    int watchPartyIdx = Integer.parseInt(strIdx);

    WatchPartyDAO wpDao = new WatchPartyDAO();
    WatchPartyVO wp = wpDao.selectOne(watchPartyIdx);


      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Watch Party - ");
      out.print( wp.getTitle() );
      out.write("</title>\r\n");
      out.write("    <link rel=\"icon\" href=\"./sources/favicon.ico\" />\r\n");
      out.write("    <style>\r\n");
      out.write("        body { background: #000; color: #fff; font-family: Arial, sans-serif; width: 100%; height: 98vh; margin: 0;}\r\n");
      out.write("        h1 {margin: 0; height: 6%; font-size: min(28px, 4vw);}\r\n");
      out.write("        section.container {height: 94%; display: flex; justify-content: center; align-items: center;}\r\n");
      out.write("       @media (max-width: 768px) { section.container { flex-direction: column; height: 84%; align-items: normal; } .videowrapper { flex: 5 !important; } .chatting-wrapper { margin-top: 14px; flex: 3 !important; } }\r\n");
      out.write("        .videowrapper {flex: 7; height: 100%; display: flex; flex-direction: column;}\r\n");
      out.write("        .chatting-wrapper {flex: 2; height: 100%;}\r\n");
      out.write("        #video-container { text-align: center; width: 100%; height: 94%;}\r\n");
      out.write("        iframe {width: 100%; height: 100%;}\r\n");
      out.write("        #chat-container { -ms-overflow-style: none; border: 1px solid #ccc; height: 92%; overflow-y: scroll; padding: 0.5rem; }\r\n");
      out.write("        #chat-container::-webkit-scrollbar { display:none; }\r\n");
      out.write("        #chat-input { color: #fff; border: solid 2px #fff; width: 100%; padding: 10px 0.5rem; background-color: transparent; border-top: none; outline: none; }\r\n");
      out.write("        #sync-wrapper { display: flex; justify-content: space-between; padding-inline: 12px; margin-top: 16px; }\r\n");
      out.write("        #send-btn { padding: 0; border: solid 2px #fff; background-color: transparent; border-left: none; border-top: none; height: 37px; color: #fff; font-size: 10px; }\r\n");
      out.write("        #status { margin-top: 0.5rem; font-size: 0.9rem; color: gray; }\r\n");
      out.write("        #sync-button { padding: 0.5rem 1rem; background-color: #28a745; color: white; border: none; border-radius: 4px; cursor: pointer; }\r\n");
      out.write("        #sync-status-message { font-size: min(16px, 3.2vw); margin-top: 0.5rem; color: #d9534f; }\r\n");
      out.write("        .host-chat { color: red; text-align: center; }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <h1>");
      out.print( wp.getTitle() );
      out.write("</h1>\r\n");
      out.write("    <section class=\"container\">\r\n");
      out.write("        <div class=\"videowrapper\">\r\n");
      out.write("            <div id=\"video-container\">\r\n");
      out.write("                <iframe id=\"youtube-player\" src=\"https://www.youtube.com/embed/");
      out.print( wp.getVideoId() );
      out.write("?enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div id=\"sync-wrapper\">\r\n");
      out.write("                <div id=\"sync-status-message\"></div>\r\n");
      out.write("                <button id=\"sync-button\">Sync</button>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"chatting-wrapper\">\r\n");
      out.write("            <div id=\"chat-container\"></div>\r\n");
      out.write("            <div style=\"margin-top: 0px; display: flex; align-items: center;\">\r\n");
      out.write("                <input type=\"text\" id=\"chat-input\" placeholder=\"메시지를 입력하세요...\" />\r\n");
      out.write("                <button id=\"send-btn\">전송</button>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </section>\r\n");
      out.write("\r\n");
      out.write("    <script src=\"https://www.youtube.com/iframe_api\"></script>\r\n");
      out.write("    <script>\r\n");
      out.write("        const CONTEXT_PATH   = '");
      out.print( contextPath );
      out.write("';\r\n");
      out.write("        const watchPartyIdx  = ");
      out.print( watchPartyIdx );
      out.write(";\r\n");
      out.write("        const hostIdx        = '");
      out.print( wp.getHost() );
      out.write("';\r\n");
      out.write("        \r\n");
      out.write("        console.log(\"VIEWER: 페이지 시작, wpIdx=\", watchPartyIdx);\r\n");
      out.write("\r\n");
      out.write("        let player, wsSync, wsComment;\r\n");
      out.write("        let playState        = false;\r\n");
      out.write("        let latestTimeline   = 0.0;\r\n");
      out.write("        let isSynced         = false;\r\n");
      out.write("        let allComments = [], commentDisplayInterval = null, nextCommentIndex = 0;\r\n");
      out.write("\r\n");
      out.write("        function onYouTubeIframeAPIReady() {\r\n");
      out.write("            console.log(\"VIEWER: onYouTubeIframeAPIReady 호출됨\");\r\n");
      out.write("            player = new YT.Player('youtube-player', {\r\n");
      out.write("                events: { onReady: onPlayerReady, onStateChange: onPlayerStateChange }\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function onPlayerReady(event) {\r\n");
      out.write("            console.log(\"VIEWER: onPlayerReady, 플레이어 준비 완료. WS 연결 및 상태 가져오기 시작.\");\r\n");
      out.write("            connectWebSocket();\r\n");
      out.write("            fetch(`");
      out.print( contextPath );
      out.write("/GetSyncStatusServlet?watchPartyIdx=");
      out.print( watchPartyIdx );
      out.write("`)\r\n");
      out.write("            .then(res => res.json())\r\n");
      out.write("            .then(data => {\r\n");
      out.write("                console.log(\"VIEWER: 초기 Sync 상태 수신\", data);\r\n");
      out.write("                playState = (data.play === \"PLAY\");\r\n");
      out.write("                latestTimeline = data.timeline;\r\n");
      out.write("                if (playState) {\r\n");
      out.write("                    document.getElementById('sync-status-message').textContent = '호스트가 재생 중입니다. Sync 버튼을 눌러주세요.';\r\n");
      out.write("                } else {\r\n");
      out.write("                    document.getElementById('sync-status-message').textContent = '';\r\n");
      out.write("                }\r\n");
      out.write("            })\r\n");
      out.write("            .catch(err => console.error(\"VIEWER: 초기 Sync 상태 가져오기 실패\", err));\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function onPlayerStateChange(event) {\r\n");
      out.write("            console.log(`VIEWER: onPlayerStateChange, 상태: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${event.data}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("`);\r\n");
      out.write("            if (event.data === YT.PlayerState.PLAYING) {\r\n");
      out.write("                startCommentDisplay();\r\n");
      out.write("            } else if (event.data === YT.PlayerState.PAUSED || event.data === YT.PlayerState.ENDED) {\r\n");
      out.write("                stopCommentDisplay();\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function connectWebSocket() {\r\n");
      out.write("            console.log(\"VIEWER: WebSocket 연결 시도...\");\r\n");
      out.write("            wsSync = new WebSocket(\"ws://\" + location.host + CONTEXT_PATH + \"/waSyncEndpoint\");\r\n");
      out.write("            wsSync.onopen = () => {\r\n");
      out.write("                 console.log(\"VIEWER: Sync WS 연결 성공. initSync 전송.\");\r\n");
      out.write("                 const initMsg = JSON.stringify({ type: \"initSync\", watchPartyIdx: watchPartyIdx });\r\n");
      out.write("                 wsSync.send(initMsg);\r\n");
      out.write("            };\r\n");
      out.write("            wsSync.onmessage = (event) => {\r\n");
      out.write("                const msg = JSON.parse(event.data);\r\n");
      out.write("                console.log(\"VIEWER: Sync WS 메시지 수신\", msg);\r\n");
      out.write("                if (msg.type === \"sync\" && msg.watchPartyIdx === watchPartyIdx) {\r\n");
      out.write("                    latestTimeline = msg.timeline;\r\n");
      out.write("                    playState = (msg.play === \"PLAY\");\r\n");
      out.write("                    if (isSynced) {\r\n");
      out.write("                        console.log(\"VIEWER: 동기화된 상태. 플레이어 제어 시도.\");\r\n");
      out.write("                        const currentTime = player.getCurrentTime();\r\n");
      out.write("                        if (Math.abs(currentTime - latestTimeline) > 2) {\r\n");
      out.write("                            console.log(`VIEWER: 시간 차이 > 2초. 강제 이동. ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${currentTime}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(" -> ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${latestTimeline}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("`);\r\n");
      out.write("                            player.seekTo(latestTimeline, true);\r\n");
      out.write("                        }\r\n");
      out.write("                        if (playState) {\r\n");
      out.write("                            console.log(\"VIEWER: playVideo() 호출\");\r\n");
      out.write("                            player.playVideo();\r\n");
      out.write("                        } else {\r\n");
      out.write("                            console.log(\"VIEWER: pauseVideo() 호출\");\r\n");
      out.write("                            player.pauseVideo();\r\n");
      out.write("                        }\r\n");
      out.write("                    } else {\r\n");
      out.write("                        console.log(\"VIEWER: 동기화 전 상태. 플레이어 제어 안함.\");\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("            };\r\n");
      out.write("            wsSync.onclose = () => console.log(\"VIEWER: Sync WS 연결 종료\");\r\n");
      out.write("            wsSync.onerror = (err) => console.error(\"VIEWER: Sync WS 에러\", err);\r\n");
      out.write("\r\n");
      out.write("            wsComment = new WebSocket(\"ws://\" + location.host + CONTEXT_PATH + \"/waCommentEndpoint\");\r\n");
      out.write("            wsComment.onopen = () => {\r\n");
      out.write("                console.log(\"VIEWER: Comment WS 연결 성공. initComment 전송.\");\r\n");
      out.write("                const initMsg = JSON.stringify({ type: \"initComment\", watchPartyIdx: watchPartyIdx });\r\n");
      out.write("                wsComment.send(initMsg);\r\n");
      out.write("            };\r\n");
      out.write("            wsComment.onmessage = (event) => {\r\n");
      out.write("                const msg = JSON.parse(event.data);\r\n");
      out.write("                console.log(\"VIEWER: Comment WS 메시지 수신\", msg);\r\n");
      out.write("                if (msg.type === \"comment\") {\r\n");
      out.write("                    appendChat(msg.nickname, msg.chatting, msg.timeline, msg.timestamp);\r\n");
      out.write("                } else if (msg.type === \"initCommentList\") {\r\n");
      out.write("                    allComments = msg.comments.sort((a, b) => a.timeline - b.timeline);\r\n");
      out.write("                    nextCommentIndex = 0;\r\n");
      out.write("                    document.getElementById(\"chat-container\").innerHTML = '';\r\n");
      out.write("                }\r\n");
      out.write("            };\r\n");
      out.write("            wsComment.onclose = () => console.log(\"VIEWER: Comment WS 연결 종료\");\r\n");
      out.write("            wsComment.onerror = (err) => console.error(\"VIEWER: Comment WS 에러\", err);\r\n");
      out.write("\r\n");
      out.write("            document.getElementById(\"send-btn\").addEventListener(\"click\", () => {\r\n");
      out.write("                const input = document.getElementById(\"chat-input\");\r\n");
      out.write("                const text = input.value.trim();\r\n");
      out.write("                if (text === \"\") return;\r\n");
      out.write("                const currentTime = player.getCurrentTime();\r\n");
      out.write("                const nickname = `");
      out.print(nickname );
      out.write("`;\r\n");
      out.write("                const chatMsg = JSON.stringify({\r\n");
      out.write("                    type: \"comment\", watchPartyIdx: watchPartyIdx, nickname: nickname,\r\n");
      out.write("                    chatting: text, timeline: currentTime\r\n");
      out.write("                });\r\n");
      out.write("                console.log(\"VIEWER: 채팅 메시지 전송 ->\", chatMsg);\r\n");
      out.write("                wsComment.send(chatMsg);\r\n");
      out.write("                input.value = \"\";\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("       \r\n");
      out.write("        document.getElementById(\"sync-button\").addEventListener(\"click\", () => {\r\n");
      out.write("            console.log(\"VIEWER: Sync 버튼 클릭. 최신 상태 다시 요청.\");\r\n");
      out.write("            fetch(`");
      out.print( contextPath );
      out.write("/GetSyncStatusServlet?watchPartyIdx=");
      out.print( watchPartyIdx );
      out.write("`)\r\n");
      out.write("            .then(res => res.json())\r\n");
      out.write("            .then(data => {\r\n");
      out.write("                console.log(\"VIEWER: Sync 버튼용 상태 수신\", data);\r\n");
      out.write("                playState = (data.play === \"PLAY\");\r\n");
      out.write("                latestTimeline = data.timeline;\r\n");
      out.write("                if (playState) {\r\n");
      out.write("                    console.log(\"VIEWER: Sync 시작! seekTo 및 playVideo 호출.\");\r\n");
      out.write("                    player.seekTo(latestTimeline, true);\r\n");
      out.write("                    player.playVideo();\r\n");
      out.write("                    isSynced = true;\r\n");
      out.write("                    document.getElementById(\"sync-status-message\").textContent = '';\r\n");
      out.write("                } else {\r\n");
      out.write("                    document.getElementById(\"sync-status-message\").textContent = '아직 재생 중이 아닙니다.';\r\n");
      out.write("                }\r\n");
      out.write("            })\r\n");
      out.write("            .catch(err => {\r\n");
      out.write("                console.error(\"VIEWER: Sync 버튼 상태 가져오기 실패\", err);\r\n");
      out.write("                document.getElementById(\"sync-status-message\").textContent = '동기화 상태를 가져오는 중 오류가 발생했습니다.';\r\n");
      out.write("            });\r\n");
      out.write("        });\r\n");
      out.write("        \r\n");
      out.write("        // 이하 나머지 헬퍼 함수들은 수정 없이 그대로 유지됩니다.\r\n");
      out.write("        function appendChat(nick, text, timeline, timestamp) {\r\n");
      out.write("            const chatContainer = document.getElementById(\"chat-container\");\r\n");
      out.write("            const p = document.createElement(\"p\");\r\n");
      out.write("            const timeLabel = formatTime(timeline);\r\n");
      out.write("            if (nick === \"host\") {\r\n");
      out.write("                p.classList.add('host-chat');\r\n");
      out.write("                p.innerHTML = \"<strong><< \" + text + \" >></strong>\";\r\n");
      out.write("            } else {   \r\n");
      out.write("                p.innerHTML = \"<strong>[\" + timeLabel + \"] \" + nick + \":</strong> \" + text;\r\n");
      out.write("            }\r\n");
      out.write("            chatContainer.appendChild(p);\r\n");
      out.write("            chatContainer.scrollTop = chatContainer.scrollHeight;\r\n");
      out.write("        }\r\n");
      out.write("       \r\n");
      out.write("        function startCommentDisplay() {\r\n");
      out.write("            if (commentDisplayInterval) { clearInterval(commentDisplayInterval); }\r\n");
      out.write("            commentDisplayInterval = setInterval(() => {\r\n");
      out.write("                const currentTime = player.getCurrentTime();\r\n");
      out.write("                while (nextCommentIndex < allComments.length && allComments[nextCommentIndex].timeline <= currentTime) {\r\n");
      out.write("                    const comment = allComments[nextCommentIndex];\r\n");
      out.write("                    appendChat(comment.nickname, comment.chatting, comment.timeline, comment.createdAt);\r\n");
      out.write("                    nextCommentIndex++;\r\n");
      out.write("                }\r\n");
      out.write("            }, 1000);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function stopCommentDisplay() {\r\n");
      out.write("            if (commentDisplayInterval) { clearInterval(commentDisplayInterval); commentDisplayInterval = null; }\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function formatTime(sec) {\r\n");
      out.write("            const m = Math.floor(sec / 60);\r\n");
      out.write("            const s = Math.floor(sec % 60);\r\n");
      out.write("            return (m < 10 ? \"0\" + m : m) + \":\" + (s < 10 ? \"0\" + s : s);\r\n");
      out.write("        }\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
